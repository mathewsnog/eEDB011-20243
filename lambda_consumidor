import sys
import logging
import pymysql
import json
import os
import boto3 
import csv

# rds settings
user_name = os.environ['USER_NAME']
password = os.environ['PASSWORD']
rds_proxy_host = os.environ['RDS_PROXY_HOST']
db_name = os.environ['DB_NAME']

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# create the database connection outside of the handler to allow connections to be
# re-used by subsequent function invocations.
try:
        conn = pymysql.connect(host=rds_proxy_host, user=user_name, passwd=password, db=db_name, connect_timeout=5)
except pymysql.MySQLError as e:
    logger.error("ERROR: Unexpected error: Could not connect to MySQL instance.")
    logger.error(e)
    sys.exit(1)

logger.info("SUCCESS: Connection to RDS for MySQL instance succeeded")

def lambda_handler(event, context):
    """
    creates a new RDS database table and writes records to it
    """
    message = event['Records'][0]['body']
    #data = json.loads(message)
    ano = message['Ano']
    trimestre = message['Trimestre']
    categoria = message['Categoria']
    tipo = message['Tipo']
    cnpj = message['CNPJ IF']
    instFinanceira = message['Instituição financeira']
    indice = message['Índice']
    qtdReclamacoesReguladasProcedentes = message['Quantidade de reclamações reguladas procedentes']
    qtdReclamacoesReguladas = message['Quantidade de reclamações reguladas - outras']
    qtdReclamacoesNaoReguladas = message['Quantidade de reclamações não reguladas']
    qtdTotalReclamacoes = message['Quantidade total de reclamações']
    qtdTotalClientes = message['Quantidade total de clientes – CCS e SCR']
    qtdClientesCCS = message['Quantidade de clientes – CCS']
    qtdClientesSCR = message['Quantidade de clientes – SCR']


    item_count = 0
    sql_string = f"insert into reclamacoes (ano, trimestre, categoria, tipo, cnpj, instFinanceira, indice, qtdReclamacoesReguladasProcedentes, qtdReclamacoesReguladas, qtdReclamacoesNaoReguladas, qtdTotalReclamacoes, qtdTotalClientes, qtdClientesCCS, qtdClientesSCR) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"

    with conn.cursor() as cur:
        cur.execute("create table my_db.reclamacoes (ID_INC int AUTO_INCREMENT, ano int, trimestre varchar(100), categoria varchar(255), tipo varchar(255), cnpj varchar(100), instFinanceira varchar(255), indice float, qtdReclamacoesReguladasProcedentes int, qtdReclamacoesReguladas int , qtdReclamacoesNaoReguladas int, qtdTotalReclamacoes int, qtdTotalClientes int, qtdClientesCCS int, qtdClientesSCR int, PRIMARY KEY (ID_INC))")
        cur.execute(sql_string, (ano, trimestre, categoria, tipo, cnpj, instFinanceira, indice, qtdReclamacoesReguladasProcedentes, qtdReclamacoesReguladas, qtdReclamacoesNaoReguladas, qtdTotalReclamacoes, qtdTotalClientes, qtdClientesCCS, qtdClientesSCR))
        conn.commit()
        for row in cur:
            item_count += 1
            logger.info(row)
        
        # join between Bancos table from RDS and Reclamacoes from 
        cur.execute("SELECT *  FROM Reclamacoes   INNER JOIN Banco    USING (cnpj);")
        result = cur.fetchall()
    conn.commit()


    #Save the Query results to a CSV file
    fp = open('/tmp/arquivoResultado.csv', 'w')
    myFile = csv.writer(fp)
    myFile.writerows(result)
    fp.close()
        
    #S3 CONNECTIVITY
    s3_client = boto3.client('s3')        

    
    #Upload this file to S3  --Its not mandatory for this process
    s3_client.upload_file('/tmp/arquivoResultado.csv', '653050266265atividade7resultado', 'arquivoResultado.csv')
    return { 
      'statusCode': 200, 
      'body': 'File uploaded successfully.' 
    }
